{"version":3,"sources":["components/Slider.js","components/Product.js","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["withStyles","root","color","height","width","padding","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","props","Typography","label","ARView","useState","x","y","z","position","setPosition","rotation","setRotation","element","setElement","registerClickHandler","useCallback","event","self","touchPoint","detail","intersection","point","document","getElementById","newElement","createElement","randomYRotation","Math","random","setAttribute","el","sceneEl","appendChild","addEventListener","property","to","easing","dur","handleXRotation","_","newValue","xRotation","Number","handleYRotation","yRotation","handleZRotation","zRotation","useEffect","navigator","mediaDevices","getUserMedia","console","log","audio","video","facingMode","then","stream","srcObject","enumerateDevices","error","AFRAME","registerComponent","init","join","id","autoPlay","controls","tap-place","src","raycaster","cursor","camera","look-controls","mouse-cursor","light","type","intensity","class","geometry","window","outerHeight","outerWidth","material","style","bottom","paddingLeft","valueLabelDisplay","name","defaultValue","min","max","onChange","disabled","ImageView","Product","showARView","App","className","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf9c79f2.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MUISlider from \"@material-ui/core/Slider\";\n\nfunction Slider(props) {\n  return (\n    <>\n      <Typography>{props.label}</Typography>\n      <MUISlider {...props} />\n    </>\n  );\n}\n\nexport default withStyles({\n  root: {\n    color: \"#52af77\",\n    height: 8,\n    width: \"50%\",\n    padding: \"20px\"\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -8,\n    marginLeft: -12,\n    \"&:focus,&:hover,&$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 4px)\"\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider);\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport AFRAME from \"aframe\";\nimport Slider from \"./Slider\";\n\nfunction ARView() {\n  const [position, setPosition] = useState({ x: 0, y: 10, z: 0 });\n  const [rotation, setRotation] = useState([0, 0, 0]);\n  const [element, setElement] = useState(null);\n\n  const registerClickHandler = useCallback((event, self) => {\n    // The raycaster gives a location of the touch in the scene\n    const touchPoint = event.detail.intersection.point;\n\n    if (!document.getElementById(\"model\")) {\n      // Create new entity for the new object\n      const newElement = document.createElement(\"a-entity\");\n      setElement(newElement);\n\n      const randomYRotation = Math.random() * 360;\n      setRotation([rotation[0], randomYRotation, rotation[2]]);\n\n      newElement.setAttribute(\"id\", \"model\");\n      newElement.setAttribute(\"draggable\", \"true\");\n      newElement.setAttribute(\"visible\", \"false\");\n      newElement.setAttribute(\"scale\", \"0.0001 0.0001 0.0001\");\n\n      newElement.setAttribute(\"gltf-model\", \"#treeModel\");\n      self.el.sceneEl.appendChild(newElement);\n\n      newElement.addEventListener(\"model-loaded\", () => {\n        // Once the model is loaded, we are ready to show it popping in using an animation\n        newElement.setAttribute(\"visible\", \"true\");\n        newElement.setAttribute(\"animation\", {\n          property: \"scale\",\n          to: \"0.01 0.01 0.01\",\n          easing: \"easeOutElastic\",\n          dur: 800\n        });\n      });\n    }\n    setPosition({ ...touchPoint });\n  }, []);\n\n  const handleXRotation = useCallback(\n    (_, newValue) => {\n      const xRotation = Number(newValue);\n      if (xRotation) {\n        setRotation([xRotation, rotation[1], rotation[2]]);\n      }\n    },\n    [rotation, setRotation]\n  );\n\n  const handleYRotation = useCallback(\n    (_, newValue) => {\n      const yRotation = Number(newValue);\n      if (yRotation) {\n        setRotation([rotation[0], yRotation, rotation[2]]);\n      }\n    },\n    [rotation, setRotation]\n  );\n\n  const handleZRotation = useCallback(\n    (_, newValue) => {\n      const zRotation = Number(newValue);\n      if (zRotation) {\n        setRotation([rotation[0], rotation[1], zRotation]);\n      }\n    },\n    [rotation, setRotation]\n  );\n\n  useEffect(() => {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      console.log(\"Requesting camera permission\");\n      navigator.mediaDevices\n        .getUserMedia({ audio: false, video: true, facingMode: \"environment\" })\n        .then(stream => {\n          console.log(\"Setting video output to video tag\", stream);\n          const video = document.getElementById(\"video\");\n          video.srcObject = stream;\n        });\n      navigator.mediaDevices.enumerateDevices().then(console.log);\n    } else {\n      console.error(\n        \"navigator.mediaDevices.getUserMedia is not supported. Use another browser.\"\n      );\n    }\n\n    AFRAME.registerComponent(\"tap-place\", {\n      init: function() {\n        const ground = document.getElementById(\"ground\");\n        ground.addEventListener(\"click\", event => {\n          registerClickHandler(event, this);\n        });\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (element) {\n      element.setAttribute(\"position\", position);\n      element.setAttribute(\"rotation\", rotation.join(\" \"));\n    }\n  }, [element, position, rotation]);\n\n  useEffect(() => {\n    if (element) {\n      element.addEventListener(\"click\", event => {\n        console.log(event);\n      });\n    }\n  }, [element]);\n\n  return (\n    <div>\n      <div>\n        <video id=\"video\" autoPlay controls width=\"100%\" height=\"100%\"></video>\n        <a-scene tap-place>\n          <a-assets>\n            <a-asset-item\n              id=\"treeModel\"\n              src=\"./3d-models/Tree/tree.glb\"\n            ></a-asset-item>\n          </a-assets>\n\n          <a-camera\n            position=\"0 8 0\"\n            raycaster=\"objects: .cantap\"\n            cursor=\"fuse: false;rayOrigin: mouse;\"\n          ></a-camera>\n\n          <a-entity camera look-controls mouse-cursor></a-entity>\n\n          <a-entity\n            light=\"type: directional;\n               intensity: 0.8;\"\n            position=\"1 4.3 2.5\"\n          ></a-entity>\n\n          <a-light type=\"ambient\" intensity=\"1\"></a-light>\n\n          <a-entity\n            id=\"ground\"\n            class=\"cantap\"\n            geometry={`primitive: plane; height: ${window.outerHeight}; width: ${window.outerWidth}`}\n            material=\"color: #ffffff; transparent: true; opacity: 0.0\"\n            position=\"0 0 -10\"\n          ></a-entity>\n        </a-scene>\n      </div>\n      <div\n        style={{\n          position: \"fixed\",\n          bottom: \"0%\",\n          width: \"50%\",\n          height: \"auto\",\n          paddingLeft: \"25%\"\n        }}\n      >\n        <Slider\n          label=\"X - Rotation\"\n          valueLabelDisplay=\"auto\"\n          name=\"x-rotation\"\n          defaultValue={0}\n          min={-180}\n          max={180}\n          onChange={handleXRotation}\n          disabled={!element}\n        />\n\n        <Slider\n          label=\"Y - Rotation\"\n          valueLabelDisplay=\"auto\"\n          name=\"y-rotation\"\n          defaultValue={0}\n          min={-180}\n          max={180}\n          onChange={handleYRotation}\n          disabled={!element}\n        />\n\n        <Slider\n          label=\"Z - Rotation\"\n          valueLabelDisplay=\"auto\"\n          name=\"z-rotation\"\n          defaultValue={0}\n          min={-180}\n          max={180}\n          onChange={handleZRotation}\n          disabled={!element}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction ImageView() {\n  return <div />;\n}\n\nfunction Product({ showARView }) {\n  if (showARView) {\n    return <ARView />;\n  } else {\n    return <ImageView />;\n  }\n}\n\nexport default Product;\n","import React from \"react\";\n\nimport Product from \"./components/Product\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Product showARView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}